import pygame 
from pygame import mixer
import random

pygame.init()
pygame.display.set_caption("space invaders")
screen = pygame.display.set_mode((800,800))
clock = pygame.time.Clock()
gameover = False

mixer.init()
#shooting sound
shootingSound = pygame.mixer.Sound("blaster.mp3")
alien = pygame.transform.scale(pygame.image.load('normal.png'), (80, 80))

class Bullet:
    def __init__(self, xpos, ypos):
        self.xpos = xpos
        self.ypos = ypos
        self.isAlive = False
       
    def move(self, xpos, ypos):
        if self.isAlive == True: 
            self.ypos-=5
        if self.ypos < 0:
            self.isAlive == False
            self.xpos = xpos
            self.ypos = ypos
           
    def draw(self):
        pygame.draw.rect(screen, (250, 250, 250), (self.xpos, self.ypos, 3, 20))
   
class Alien:
    def __init__(self, xpos, ypos):
        self.xpos = xpos
        self.ypos = ypos
        self.color = (random.randrange(100, 250),random.randrange(100, 250),random.randrange(100, 250))
        self.isAlive = True
        self.direction = 1
        
    
    def draw(self):
        if self.isAlive == True:
            
            screen.blit(alien, (self.xpos, self.ypos, 40, 40))
    def move(self):
        if timer%100==0:
            self.xpos+=25
            print("moving right")
    def move(self, time):

        #resets
        if time % 400 == 0:
            self.ypos += 100
            self.direction *= -1
            return 0
       
        #move
        if time % 100 == 0:
            self.xpos+=25*self.direction
        return time
    
    def collide(self, BulletX, BulletY):
        if self.isAlive:
            if BulletX > self.xpos: 
                if BulletX < self.xpos +40:
                    if BulletY < self.ypos +40:
                        if BulletY > self.ypos:
                            print ("hit")
                            self.isAlive = False
                            return False
                       
        return True
   
class Wall:
    def __init__(self, xpos, ypos, numHits):
        self.xpos = xpos
        self.ypos = ypos
        self.isAlive = True
        self.numHits = 0
   
    def draw(self):
        if self.numHits > -1:
            if self.numHits == 0:
                pygame.draw.rect(screen, (64, 217, 52), (self.xpos, self.ypos, 30, 30))
            if self.numHits == 1:
                pygame.draw.rect(screen, (61, 227, 48), (self.xpos, self.ypos, 30, 30))
            if self.numHits == 2:
                pygame.draw.rect(screen, (62, 250, 47), (self.xpos, self.ypos, 30, 30))
           
    def collide(self, BulletX, BulletY):
        if self.numHits < 3: 
            if BulletX > self.xpos:
                if BulletX < self.xpos +30: 
                    if BulletY < self.ypos +30: 
                        if BulletY > self.ypos: 
                            print ("AHHHHHHHH")
                            self.numHits += 1
                            return False
        return True
   
class Missile:
    def __init__(self):
        self.xpos = -10
        self.ypos = -10
        self.isAlive = False
       
    def move(self):        
        if self.isAlive == True:
            self.ypos+=5 
        if self.ypos > 800:
            self.isAlive == False
            self.xpos = -10 
            self.ypos = -10
           
    def draw(self):
        pygame.draw.rect(screen, (250, 50, 50), (self.xpos, self.ypos, 3, 20))

       
           
       
missiles = []
for g in range (10):  
        missiles.append(Missile())
       
       
armada = [] 
for i in range (4): 
    for j in range (9): 
        armada.append(Alien(j*80+50, i*80+50)) 
       
walls =[]
for k in range (4):
    for i in range (2):
        for j in range (3):
            walls.append(Wall(j*30+200*k+50, i*30+600, 0))
       

xpos = 400
ypos = 750
xpos1 = 420
ypos1 = 730
xpos2 = 405
ypos2 = 740
xpos3 = 425
ypos3 = 720

#game variables
timer =0;
moveLeft = False
moveRight = False
shoot = False
lives = 3

my_font = pygame.font.SysFont('Comic Sans MS', 30)
text_surface = my_font.render('LIVES:', False, (255, 255, 255))
text2 = my_font.render(str(int(lives)), 1, (54, 242, 39))

bullet = Bullet(xpos+28, ypos)
   
while not gameover and lives > 0: #GAME LOOP------------------------------------------------------------
    clock.tick(60)
    timer += 1
   
    #input section--------------------------------------------------------
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            gameover = True
           
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                moveLeft = True
               
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RIGHT:
                moveRight = True
               
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                shoot = True
                pygame.mixer.Sound.play(shootingSound)
               
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT:
                moveLeft = False
               
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_RIGHT:
                moveRight = False
               
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_SPACE:
                shoot = False
   
    #physics section-------------------------------------------------------------------------------
               
    for g in range (len(missiles)):
        missiles[g].move()
       
    for i in range (len(armada)):
        timer = armada[i].move(timer)
   
    if moveLeft == True:
        vx = -3
    elif moveRight == True:
        vx = 3
    else:
        vx = 0

    if shoot == True:
        bullet.isAlive = True
       
    if bullet.isAlive == True:
        bullet.move(xpos+28, ypos)
        if bullet.isAlive == True:
            for i in range (len(armada)):
                bullet.isAlive = armada[i].collide(bullet.xpos, bullet.ypos)
                if bullet.isAlive == False:
                    break
               
            for k in range (len(walls)): 
                if walls[k].collide(bullet.xpos, bullet.ypos) == False:
                    bullet.isAlive = False
                    break
   
    else:
        bullet.xpos = xpos +28
        bullet.ypos = ypos
       
   
    for k in range(len(walls)):
        for g in range(len(missiles)):
            if missiles[g].isAlive == True:
                if walls[k].collide(missiles[g].xpos, missiles[g].ypos) == False:
                    missiles[g].isAlive = False
                    break
               
    num = random.randrange(0, 100)
    if num <2:
        anum = random.randrange(0, len(armada))
        if armada[anum].isAlive==True:
            for i in range(len(missiles)):
                if missiles[i].isAlive == False:
                    missiles[i].isAlive=True
                    missiles[i].xpos =  armada[anum].xpos+5
                    missiles[i].ypos = armada[anum].ypos
                    print("pew pew!")
                    pygame.mixer.Sound.play(shootingSound)
                    break
               
    for g in range(len(missiles)):
        if missiles[g].xpos > xpos:
            if missiles[g].xpos < xpos+60:
                if missiles[g].ypos < ypos +10:
                    if missiles[g].ypos > ypos: 
                        print("player hit")
                        lives -= 1                       
       
    for i in range(len(armada)):
        if armada[i].ypos > 760:
            lives -= 3
  
    #update player position
    xpos += vx
    xpos1 += vx
    xpos2 += vx
    xpos3 += vx
   
    # RENDER section------------------------------------------------------------------------------------------
   
    screen.fill((0, 0, 0))
   
    pygame.draw.rect(screen, (64, 217, 52), (xpos, ypos, 60, 20)) #player
    pygame.draw.rect(screen, (64, 217, 52), (xpos1, ypos1, 20, 25)) #player
    pygame.draw.rect(screen, (64, 217, 52), (xpos2, ypos2, 50, 25)) #player
    pygame.draw.rect(screen, (64, 217, 52), (xpos3, ypos3, 10, 40)) #player
   
   
    screen.blit(text_surface, (0,0))
    text2 = my_font.render(str(int(lives)), 1, (255, 30, 0))
    screen.blit(text2, (100, 0))
   
    if bullet.isAlive == True:
        bullet.draw()
        
    #Aliens
    if armada[i].isAlive == True:
        for i in range (len(armada)):
            armada[i].draw()
    for k in range (len(walls)):
        walls[k].draw()
    for g in range (len(missiles)):
        if missiles[g].isAlive == True:
            missiles[g].draw()
   
    pygame.display.flip()
   
#end game loop---------------------------------------------------------------------------------------
if lives <= 0:
    print ("gameover")
pygame.quit()
